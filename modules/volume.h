/*
    Looperlative LP1 audio looper
    Copyright (C) 2005-2013 Robert Amstadt dba Looperlative Audio Products

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; version 2 of the License only.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    Proprietary licensing of the software as modified only by Looperlative
    Audio Products is available.  Please contact Looperlative Audio Products
    for details.

    Email: licensing@looperlative.com

    US mail:	Looperlative Audio Products
    		6081 Meridian Ave. #70-315
		San Jose, CA 95120
*/

long sport_volume_mult[512] =
{
    2048,
    2045,
    2042,
    2040,
    2037,
    2034,
    2031,
    2028,
    2026,
    2023,
    2020,
    2017,
    2014,
    2012,
    2009,
    2006,
    2003,
    2000,
    1997,
    1995,
    1992,
    1989,
    1986,
    1983,
    1980,
    1977,
    1975,
    1972,
    1969,
    1966,
    1963,
    1960,
    1957,
    1954,
    1951,
    1948,
    1946,
    1943,
    1940,
    1937,
    1934,
    1931,
    1928,
    1925,
    1922,
    1919,
    1916,
    1913,
    1910,
    1907,
    1904,
    1901,
    1898,
    1895,
    1892,
    1889,
    1886,
    1883,
    1880,
    1877,
    1874,
    1871,
    1868,
    1865,
    1862,
    1859,
    1856,
    1853,
    1850,
    1847,
    1844,
    1841,
    1838,
    1835,
    1832,
    1829,
    1826,
    1823,
    1820,
    1816,
    1813,
    1810,
    1807,
    1804,
    1801,
    1798,
    1795,
    1792,
    1788,
    1785,
    1782,
    1779,
    1776,
    1773,
    1770,
    1766,
    1763,
    1760,
    1757,
    1754,
    1751,
    1747,
    1744,
    1741,
    1738,
    1735,
    1731,
    1728,
    1725,
    1722,
    1719,
    1715,
    1712,
    1709,
    1706,
    1702,
    1699,
    1696,
    1693,
    1689,
    1686,
    1683,
    1680,
    1676,
    1673,
    1670,
    1666,
    1663,
    1660,
    1657,
    1653,
    1650,
    1647,
    1643,
    1640,
    1637,
    1633,
    1630,
    1627,
    1623,
    1620,
    1617,
    1613,
    1610,
    1606,
    1603,
    1600,
    1596,
    1593,
    1589,
    1586,
    1583,
    1579,
    1576,
    1572,
    1569,
    1566,
    1562,
    1559,
    1555,
    1552,
    1548,
    1545,
    1541,
    1538,
    1535,
    1531,
    1528,
    1524,
    1521,
    1517,
    1514,
    1510,
    1507,
    1503,
    1500,
    1496,
    1492,
    1489,
    1485,
    1482,
    1478,
    1475,
    1471,
    1468,
    1464,
    1461,
    1457,
    1453,
    1450,
    1446,
    1443,
    1439,
    1435,
    1432,
    1428,
    1425,
    1421,
    1417,
    1414,
    1410,
    1406,
    1403,
    1399,
    1395,
    1392,
    1388,
    1384,
    1381,
    1377,
    1373,
    1370,
    1366,
    1362,
    1359,
    1355,
    1351,
    1347,
    1344,
    1340,
    1336,
    1332,
    1329,
    1325,
    1321,
    1317,
    1314,
    1310,
    1306,
    1302,
    1298,
    1295,
    1291,
    1287,
    1283,
    1279,
    1276,
    1272,
    1268,
    1264,
    1260,
    1256,
    1253,
    1249,
    1245,
    1241,
    1237,
    1233,
    1229,
    1225,
    1222,
    1218,
    1214,
    1210,
    1206,
    1202,
    1198,
    1194,
    1190,
    1186,
    1182,
    1178,
    1174,
    1170,
    1167,
    1163,
    1159,
    1155,
    1151,
    1147,
    1143,
    1139,
    1135,
    1131,
    1127,
    1122,
    1118,
    1114,
    1110,
    1106,
    1102,
    1098,
    1094,
    1090,
    1086,
    1082,
    1078,
    1074,
    1070,
    1065,
    1061,
    1057,
    1053,
    1049,
    1045,
    1041,
    1037,
    1032,
    1028,
    1024,
    1020,
    1016,
    1012,
    1007,
    1003,
    999,
    995,
    991,
    986,
    982,
    978,
    974,
    969,
    965,
    961,
    957,
    952,
    948,
    944,
    940,
    935,
    931,
    927,
    923,
    918,
    914,
    910,
    905,
    901,
    897,
    892,
    888,
    884,
    879,
    875,
    870,
    866,
    862,
    857,
    853,
    849,
    844,
    840,
    835,
    831,
    826,
    822,
    818,
    813,
    809,
    804,
    800,
    795,
    791,
    786,
    782,
    777,
    773,
    768,
    764,
    759,
    755,
    750,
    746,
    741,
    737,
    732,
    727,
    723,
    718,
    714,
    709,
    705,
    700,
    695,
    691,
    686,
    681,
    677,
    672,
    668,
    663,
    658,
    654,
    649,
    644,
    640,
    635,
    630,
    625,
    621,
    616,
    611,
    607,
    602,
    597,
    592,
    588,
    583,
    578,
    573,
    568,
    564,
    559,
    554,
    549,
    544,
    540,
    535,
    530,
    525,
    520,
    515,
    511,
    506,
    501,
    496,
    491,
    486,
    481,
    476,
    472,
    467,
    462,
    457,
    452,
    447,
    442,
    437,
    432,
    427,
    422,
    417,
    412,
    407,
    402,
    397,
    392,
    387,
    382,
    377,
    372,
    367,
    362,
    357,
    352,
    347,
    341,
    336,
    331,
    326,
    321,
    316,
    311,
    306,
    301,
    295,
    290,
    285,
    280,
    275,
    270,
    264,
    259,
    254,
    249,
    243,
    238,
    233,
    228,
    223,
    217,
    212,
    207,
    201,
    196,
    191,
    186,
    180,
    175,
    170,
    164,
    159,
    154,
    148,
    143,
    138,
    132,
    127,
    121,
    116,
    111,
    105,
    100,
    94,
    89,
    84,
    78,
    73,
    67,
    62,
    56,
    51,
    45,
    40,
    34,
    29,
    23,
    18,
    12,
    7,
    1
};
    
static __inline__ long apply_volume_512steps(long sample_in, int volume)
{
    long result;

    if (volume == 0)
	return sample_in;
    else if (volume > 0)
    {
	result = ((sample_in >> 10) * (2048 + (volume >> 2))) >> 1;

	if (result > 0x07ffffff)
	    result = 0x7fffffff;
	else if (result < -0x7fffffff)
	    result = -0x07ffffff;

    }
    else if (volume < -512)
	result = 0;
    else
    {
	volume = -volume - 1;
	result = ((sample_in >> 10) * svm[volume]) >> 1;
    }
	
    return result;
}

static __inline__ long apply_volume(long sample_in, int volume)
{
    return apply_volume_512steps(sample_in, volume * 4);
}

